n <- 20
#use the dbinom function
pr1 <- sum(dbinom(0:5, size = n, prob = p))
pr1
1-pr1
#use the equation
#create a function of calculating probability based on the equation
mybinom <- function(x){
probX <- (factorial(n)/(factorial(x)*factorial(n-x)))*p^x*(1-p)^(n-x)
probX
}
pr2 <- sum(mybinom(0:5))
pr2
1-pr2
pbinom(5,20,0.5)
1 - pbinom(q = 16, size = 20, prob = 0.25)
sum(dbinom(17:20, 20, 0.25))
format(2.960496e-08, scientific=F)
e
?exp
exp(1)
mypois <- function(x, m){
probX <- m^x*exp(1)^(-m)/factorial(x)
probX
}
mypois(x=1, m=3)
dpois(x=1, lambda=3)
sum(mypois(x=9:13, m=3))
sum(dpois(x=9:13, lambda=3))
#2)use dpois()
sum(mypois(x=9:13, m=4))
#2)use dpois()
sum(dpois(x=9:13, lambda=4))
dpois(x=4, lambda=20)
format(1.374102e-05, scientific=F)
1 - sum(dpois(x=0:14, lambda=20))
ppois(14,20) -1
hist(0:40, dpois(x=0:40, lambda=20), type="h", xlim=c(0,41), col="blue", ylab="Probability", xlab="Number of species")
hist(0:40, dpois(0:40, lambda=20), type="h", xlim=c(0,41), col="blue", ylab="Probability", xlab="Number of species")
dpois(0:40, lambda=20)
hist(dpois(0:40, lambda=20))
dpois(10,20)
hist(0:40, dpois(x=0:40, lambda=20), type="h", col="blue", ylab="Probability", xlab="Number of species")
plot(0:40, dpois(x=0:40, lambda=20), type="h", col="blue", ylab="Probability", xlab="Number of species")
hist(1)
hist(1)
#Problem 5
#probability of counting 4 species
dpois(x=4, lambda=20)
#probability of counting 15 or more species
1 - sum(dpois(x=0:14, lambda=20))
#graph
plot(0:40, dpois(x=0:40, lambda=20), type="h", col="blue", ylab="Probability", xlab="Number of species")
par(fmrow=c(1,1))
?par
par(mfrow=c(1,1))
hist(1)
#Problem 5
#probability of counting 4 species
dpois(x=4, lambda=20)
#probability of counting 15 or more species
1 - sum(dpois(x=0:14, lambda=20))
#graph
plot(0:40, dpois(x=0:40, lambda=20), type="h", col="blue", ylab="Probability", xlab="Number of species")
plot(0:40, dpois(x=0:40, lambda=10), type="h", col="blue", ylab="Probability", xlab="Number of species")
plot(0:40, dpois(x=0:40, lambda=3), type="h", col="blue", ylab="Probability", xlab="Number of species")
plot(0:40, dpois(x=0:40, lambda=25), type="h", col="blue", ylab="Probability", xlab="Number of species")
plot(0:40, dbinom(x=0:40, 40, 0.5), type="h", col="blue", ylab="Probability", xlab="Number of species")
plot(0:40, dbinom(x=0:40, 40, 0.25), type="h", col="blue", ylab="Probability", xlab="Number of species")
plot(0:10, dpois(x=0:10, lambda=2), type="h", col="blue", ylab="Probability", xlab="Number of species")
plot(0:10, dpois(x=0:10, lambda=4), type="h", col="blue", ylab="Probability", xlab="Number of species")
plot(0:10, dpois(x=0:10, lambda=7), type="h", col="blue", ylab="Probability", xlab="Number of species")
?rpois
rpois(1:100, 5)
plot(table(rpois(1:100,5)))
plot(table(rpois(1:1000,5)))
plot(table(rbinom(1000, 100, 0.05)))
?pt
?pnorm
pnorm(1.96,0,1)
1-pnorm(1.96,0,1)
pnorm(1.96,0,1)
se = 15/3
5*1.96
?pt
qnorm(0.975, 0,1)
pt(1:5, df=100)
pt(2, df=100)
qt(0.975, 9)
qt(0.975, 100)
dat <- read.csv("Galapagos", header = T)
dat <- read.csv("Galapagos.csv", header = T)
setwd("/Users/xuhong/Documents/Duke/Term 1 Courses/ENVIRON 710 Applied data analysis/Lab/Lab 6")
dat <- read.csv("Galapagos.csv", header = T)
set.seed(1001)
attach(dat)
boot()
library(boot)
library(boot)
?sample
x <- rpois(25, lambda=6)
samp1 <- sample(x, size=25, replace=T)
samp2 <- sample(x, size=25, replace=T)
data <- data.frame(cbind(samp1, samp2))
data
cbind(samp1, samp2)
data$samp[1]
data$samp1[1]
data$samp2[1]
?boot
b <- boot(data, statistic=ratio, R=999)
ratio <- function(data, i){
sum(data$samp1[i])/sum(data$samp2[i])
}
b <- boot(data, statistic=ratio, R=999)
b
b$t
b
b$t0
mean(b$t)
b$t0
set.seed(1001)
mysample <- rnorm(35, mean=20, sd=4)
mean(mysample)
sd(mysample)
mysd <- sd(mysample)
myci <- c(mymean - mysd/sqrt(35), mymean + mysd/sqrt(35))
mymean <- mean(mysample)
myci <- c(mymean - mysd/sqrt(35), mymean + mysd/sqrt(35))
myci
myci <- c(mymean - 1.96 * mysd/sqrt(35), mymean + 1.96 * mysd/sqrt(35))
pnorm(0.975)
qnorm(0.975)
for (i in 1:1000) { sample.means[i] <- mean(rnorm(35, 20, 4))}
# use bootstrapping to find ci
sample.means <- c()
for (i in 1:1000) { sample.means[i] <- mean(rnorm(35, 20, 4))}
hist(sample.means, las = 1, col = "darkblue", main="")
myci
?segments
segments(sort(sample.means)[25], 0, sort(sample.means)[25], 250, col="red", lwd=2)
segments(sort(sample.means)[975], 0, sort(sample.means)[975], 250, col="red", lwd=2)
sample.means <= 20 + 1.96*2/sqrt(35))/1000
sum(sample.means >= 20 - 1.96*2/sqrt(35) & sample.means <= 20 + 1.96*2/sqrt(35))/1000
?rnomr
?rnorm
sum(sample.means >= 20 - 1.96*4/sqrt(35) & sample.means <= 20 + 1.96*4/sqrt(35))/1000
boot.samples <- c()
for (i in 1:1000){
boot.samples[i] <- mean(sample(mysample, 35, replace=T))
}
hist(boot.samples, las = 1, col = "darkblue", main="")
boot.means <- c()
for (i in 1:1000){
boot.means[i] <- mean(sample(mysample, 35, replace=T))
}
hist(boot.means, las = 1, col = "darkblue", main="")
se <- sd(boot.means)
se
1.96*4/sqrt(35)
4/sqrt(35)
boot.means <- c()
for (i in 1:1000){
boot.means[i] <- mean(sample(mysample, 35, replace=T))
}
hist(boot.means, las = 1, col = "darkblue", main="")
se <- sd(boot.means)
se
ci <- c(mean(boot.means)-1.96*se, mean(boot.means)+1.96*se)
ci
myci
ci2 <- c(quantile(boot.mean, 0.025), quantile(boot.mean, 0.975))
ci2 <- c(quantile(boot.means, 0.025), quantile(boot.means, 0.975))
ci2
class(ci2)
ci2[1]
ci2[[1]]
head(dat)
summary(dat)
dim(dat)
plot(Area, Nspecies)
fit <- lm(Nspecies~Area)
fit
abline(fit, col="darkblue")
plot(Area, Nspecies, pch=19)
plot(Area, Nspecies, pch=19, bty="1")
plot(Area, Nspecies, pch=19, col="red")
abline(fit, col="darkblue")
plot(log10(Area), log10(Nspecies), pch=19, col="red")
plot(log10(Nspecies)~log10(Area), pch=19, col="red")
fit <- lm(log10(Nspecies)~log10(Area))
fit <- lm(Nspecies~Area)
Lfit <- lm(log10(Nspecies)~log10(Area))
abline(Lfit, col="darkblue")
Lfit
Lfit$Coefficients
Lfit$coefficients
Lco <- Lfit$coefficients
Lintercpt <- Lfit$intercept
Lintercpt
Lfit$Intercept
Lco <- Lfit$coefficients
Lco
nrow(dat)
length(dat)
length(Area)
runs <- 1000
len <- length(Nspecies)
slope <- c()
intercept <- c()
for(i in 1:runs){
samp <- dat[sample(nrow(dat), size=len, replace=T), ]
fit <- lm(log10(samp$Nspecies) ~ log10(samp$Area))
intercept[i] <- fit$coefficients[1]
slope[i] <- fit$coefficients[2]
}
mean.int <- mean(intercept)
mean.slope <- mean(slope)
mean.int
mean.slope
Lco
par(mfrow=c(1,2))
hist(intercept, las=1)
abline(v=sort(intercept)[25], col="red", lwd=1.5)
abline(v=sort(intercept)[975], col="red", lwd=1.5)
ci.int<-c(quantile(intercept, 0.025),
quantile(intercept, 0.975))
hist(slope, las=1)
abline(v=sort(slope)[25], col="red", lwd=1.5)
abline(v=sort(slope)[975], col="red", lwd=1.5)
ci.slope<-c(quantile(slope, 0.025),
quantile(slope, 0.975))
Lfit
?lm
set.seed(1001)
mysample <- rnorm(35, mean=20, sd=4)
mymean <- mean(mysample)
mysd <- sd(mysample)
zcrit <- pnorm(0.975)
myci <- c(mymean - zcrit * mysd/sqrt(35), mymean + zcrit * mysd/sqrt(35))
mymean
mysd
set.seed(1001)
sample.means <- c()
n <- 25
for (i in 1:1000) { sample.means[i] <- mean(rnorm(n, 20, 4))}
hist(sample.means, las = 1, col = "darkblue", main="")
segments(sort(sample.means)[25], 0, sort(sample.means)[25], 250, col="red", lwd=2)
segments(sort(sample.means)[975], 0, sort(sample.means)[975], 250, col="red", lwd=2)
# use true population mean and sd
sum(sample.means >= 20 - 2*4/sqrt(35) & sample.means <= 20 + 2*4/sqrt(35))/1000
qt(0.975)
qt(0.975, df=24)
sum(sample.means >= 20 - 2*4/sqrt(n) & sample.means <= 20 + 2*4/sqrt(n))/1000
par(mfrow=c(1,1))
hist(sample.means, las = 1, col = "darkblue", main="")
segments(sort(sample.means)[25], 0, sort(sample.means)[25], 250, col="red", lwd=2)
segments(sort(sample.means)[975], 0, sort(sample.means)[975], 250, col="red", lwd=2)
# use true population mean and sd
sum(sample.means >= 20 - 2*4/sqrt(n) & sample.means <= 20 + 2*4/sqrt(n))/1000
sum(sample.means >= 20 - 4/sqrt(n) & sample.means <= 20 + 4/sqrt(n))/1000
qt()
sum(sample.means >= 20 - 4/sqrt(n) & sample.means <= 20 + 4/sqrt(n))/1000
tcrit <- qt(1-0.05/2, df=n-1)
tcrit
samp.sd <- sd(sample.means)
samp.sd
4/sqrt(n)
sum(sample.means >= 20 - tcrit*samp.sd/sqrt(n) & sample.means <= 20 + tcrit*samp.sd/sqrt(n))/1000
sum(sample.means >= 20 - tcrit*samp.sd & sample.means <= 20 + tcrit*samp.sd)/1000
samp.mean <- mean(sample.means)
sum(sample.means >= samp.mean - tcrit*samp.sd & sample.means <= samp.mean + tcrit*samp.sd)/1000
myci
dat <- read.csv("Galapagos.csv", header = T)
attach(dat)
plot(Area, Nspecies, pch=19, col="red")
# linear regression
fit <- lm(Nspecies~Area)
abline(fit, col="darkblue")
# draw the logrithm plot
plot(log10(Area), log10(Nspecies), pch=19, col="red")
#plot(log10(Nspecies)~log10(Area), pch=19, col="red")
# linear regression
Lfit <- lm(log10(Nspecies)~log10(Area))
abline(Lfit, col="darkblue")
Lco <- Lfit$coefficients
runs <- 1000
len <- length(Nspecies)
slope <- c()
intercept <- c()
for(i in 1:runs){
samp <- dat[sample(nrow(dat), size=len, replace=T), ]
fit <- lm(log10(samp$Nspecies) ~ log10(samp$Area))
intercept[i] <- fit$coefficients[1]
slope[i] <- fit$coefficients[2]
}
mean.int <- mean(intercept)
mean.slope <- mean(slope)
par(mfrow=c(1,2))
hist(intercept, las=1)
abline(v=sort(intercept)[25], col="red", lwd=1.5)
abline(v=sort(intercept)[975], col="red", lwd=1.5)
ci.int<-c(quantile(intercept, 0.025),
quantile(intercept, 0.975))
hist(slope, las=1)
abline(v=sort(slope)[25], col="red", lwd=1.5)
abline(v=sort(slope)[975], col="red", lwd=1.5)
ci.slope<-c(quantile(slope, 0.025),
quantile(slope, 0.975))
ci.int
ci.slope
insects <- c(0.14, 15.49, 29.04, 6.36, 1.83, 5.40, 31.89,
3.92, 0.54, 2.01, 12.67, 48.75)
hist(insects, las = 1, ylab = "No. species",
xlab = "Abundance", main="", col="lightgrey")
insects.mean <- mean(insects)
ins.n <- length(insects)
insect.sample <- sample(insects, ins.n, replace=T)
insects <- c(0.14, 15.49, 29.04, 6.36, 1.83, 5.40, 31.89,
3.92, 0.54, 2.01, 12.67, 48.75)
hist(insects, las = 1, ylab = "No. species",
xlab = "Abundance", main="", col="lightgrey")
ins.n <- length(insects)
insects.mean <- mean(insects)
insects.sm <- c()
for (i 1:1000){
insect.sample <- sample(insects, ins.n, replace=T)
}
for (i 1:1000){
insect.sample <- sample(insects, ins.n, replace=T)
}
insects.sm <- c()
for (i in 1:1000){
insect.sample <- sample(insects, ins.n, replace=T)
insects.sm[i] <- mean(insect.sample)
}
mean(insects.sm)
insects.mean
boot.sd <- sd(insects.sm)
insects.se <- sd(insects)/sqrt(ins.n)
boot.sd
insects.se
t <- pt(0.95, df=ins.n-1)
t
t <- qt(0.95, df=ins.n-1)
t
insects.ci <- c(insects.mean - t*insects.se, insects.mean + t*insects.se)
insects.ci
insects.boot.ci <- c(quantile(insects.sm, 0.05), quantile(insects.sm, 0.95))
insects.boot.ci
t <- qt(1 - 0.10/2, df=ins.n-1)
t
t <- qt(1 - 0.10/2, df=ins.n-1)
insects.ci <- c(insects.mean - t*insects.se, insects.mean + t*insects.se)
# percentile approach to c.i.
insects.boot.ci <- c(quantile(insects.sm, 0.05), quantile(insects.sm, 0.95))
insects.ci
insects.ci
insects.boot.ci
adat <- read.csv("Afrplots.csv", header=T)
adat <- read.csv("Afrplots.csv", header=T)
adat <- read.csv("Afrplots.csv", header=T)
setwd("/Users/xuhong/Documents/Duke/Term 1 Courses/ENVIRON 710 Applied data analysis/Lab/Lab 7")
adat <- read.csv("Afrplots.csv", header=T)
summary(adat$Site)
head(adat)
adat[adat$CensusNo==1,]
adat$Site <- as.factor(rep(c(rep(1,10), rep(2,10), rep(3,10)), 2))
ada$Site
adat$Site
length(adat$Site)
bdat <- adat[adat$CensusNo == 1, ]
attach(bdat)
bdat
levels(Site)
boxplot(ChaveMoist ~ Site, las=1, ylab="Biomass", xlab="Sites")
r(mfrow=c(2,2))
bo
par(mfrow=c(2,2))
boxplot(ChaveMoist ~ Site, las=1, ylab="Biomass", xlab="Sites")
?jitter
ChaveMoist[Site==1], col = "darkgreen")
points(jitter(rep(1, length(Site[Site==1])), f=4), ChaveMoist[Site==1], col = "darkgreen")
points(jitter(rep(2, length(Site[Site==2])), f=4), ChaveMoist[Site==2], col = "darkblue")
points(jitter(rep(3, length(Site[Site==3])), f=4), ChaveMoist[Site==3], col = "darkred")
# normal assumption
boxplot(log(ChaveMoist) ~ Site, las=1,
ylab = "log(Biomass)", xlab = "Sites")
points(jitter(rep(1, length(Site[Site==1])), f=4),
log(ChaveMoist[Site==1]), col = "darkgreen")
points(jitter(rep(2, length(Site[Site==2])), f=4),
log(ChaveMoist[Site==2]), col = "darkred")
points(jitter(rep(3, length(Site[Site==3])), f=4),
log(ChaveMoist[Site==3]), col = "darkblue")
qqnorm(ChaveMoist[Site==1])
qqline(ChaveMoist[Site==1])
qqnorm(log(ChaveMoist[Site==1]))
qqline(log(ChaveMoist[Site==1]))
shapiro.test(ChaveMoist[Site==1])
sd(ChaveMoist[Site==1])/sd(ChaveMoist[Site==2])
sd(ChaveMoist[Site==2])/sd(ChaveMoist[Site==3])
sd(ChaveMoist[Site==1])/sd(ChaveMoist[Site==3])
mod1 <- aov(ChaveMoist ~ Site)
mod1
factor(Site)
Site
mod1 <- aov(ChaveMoist ~ factor(Site))
mod1
summary(mod1)
TurkeyHSD(mod1)
TukeyHSD(mod1)
plot(TukeyHSD(mod1))
error.bars <- function(yvalues, se, nm){
xv <- barplot(yvalues, ylim=c(0, (max(yvalues)+max(se))),
names=nm, ylab=deparse(substitute(yvalues)), las=1)
g <- (max(xv)-min(xv))/50
for (i in 1:length(xv)){
arrows(xv[i], yvalues[i] + se[i], xv[i],
yvalues[i]-se[i], length=0.1, angle=90,
code=3)
}
}
site.mean <- tapply(ChaveMoist, list(Site), mean)
site.n <- tapply(ChaveMoist, list(Site), length)
site.sd <- tapply(ChaveMoist, list(Site), sd)
site.se <- site.sd/sqrt(site.n)
site.se[is.na(site.se)==T] <- 0
labls <- as.character(levels(Site))
yvals <- as.vector(site.mean)
error.bars(yvalues = yvals, se = site.se, nm = labls)
adat <- read.csv("TuskData.csv", header=T)
?as.factor
head(adat)
adat[Year==1970,]
adat[adat$Year==1970,]
qqnorm(Tusk.kg[Year==1970])
qqline(Tusk.kg[Year==1970])
attach(adat)
qqnorm(Tusk.kg[Year==1970])
qqline(Tusk.kg[Year==1970])
par(mfrow=c(1,1))
qqnorm(Tusk.kg[Year==1970])
qqline(Tusk.kg[Year==1970])
par(mfrow=c(1,1))
shapiro.test(Tusk.kg[Year==1970])
qqnorm(Tusk.kg[Year==1990])
qqline(Tusk.kg[Year==1990])
shapiro.test(Tusk.kg[Year==1990])
qqnorm(Tusk.kg[Year==2010])
qqline(Tusk.kg[Year==2010])
shapiro.test(Tusk.kg[Year==2010])
sd(Tusk.kg[Year==1970])/sd(Tusk.kg[Year==1990])
sd(Tusk.kg[Year==1970])/sd(Tusk.kg[Year==2010])
sd(Tusk.kg[Year==1990])/sd(Tusk.kg[Year==2010])
mod1 <- aov(Tusk.kg ~ factor(Year))
summary(mod1)
error.bars <- function(yvalues, se, nm){
xv <- barplot(yvalues, ylim=c(0, (max(yvalues)+max(se))),
names=nm, ylab=deparse(substitute(yvalues)), las=1)
g <- (max(xv)-min(xv))/50
for (i in 1:length(xv)){
arrows(xv[i], yvalues[i] + se[i], xv[i],
yvalues[i]-se[i], length=0.1, angle=90,
code=3)
}
}
site.mean <- tapply(Tusk.kg, list(Year), mean)
site.n <- tapply(Tusk.kg, list(Year), length)
site.sd <- tapply(Tusk.kg, list(Year), sd)
site.se <- site.sd/sqrt(site.n)
site.se[is.na(site.se)==T] <- 0
labls <- as.character(levels(Year))
yvals <- as.vector(site.mean)
error.bars(yvalues = yvals, se = site.se, nm = labls)
error.bars <- function(yvalues, se, nm){
xv <- barplot(yvalues, ylim=c(0, (max(yvalues)+max(se))),
names=nm, ylab=deparse(substitute(yvalues)), las=1)
g <- (max(xv)-min(xv))/50
for (i in 1:length(xv)){
arrows(xv[i], yvalues[i] + se[i], xv[i],
yvalues[i]-se[i], length=0.1, angle=90,
code=3)
}
}
site.mean <- tapply(Tusk.kg, list(Year), mean)
site.n <- tapply(Tusk.kg, list(Year), length)
site.sd <- tapply(Tusk.kg, list(Year), sd)
site.se <- site.sd/sqrt(site.n)
site.se[is.na(site.se)==T] <- 0
labls <- as.character(levels(Year))
yvals <- as.vector(site.mean)
list(Year)
levels(Year)
factor(Year)
labls <- as.character(levels(factor(Year)))
labls
year.mean <- tapply(Tusk.kg, list(Year), mean)
year.n <- tapply(Tusk.kg, list(Year), length)
year.sd <- tapply(Tusk.kg, list(Year), sd)
year.se <- site.sd/sqrt(site.n)
year.se[is.na(year.se)==T] <- 0
labls <- as.character(levels(factor(Year)))
yvals <- as.vector(year.mean)
error.bars(yvalues = yvals, se = year.se, nm = labls)
TukeyHSD(mod1)
plot(TukeyHSD(mod1))
par(mfrow=c(1,2)
;
par(mfrow=c(1,2))
error.bars(yvalues = yvals, se = year.se, nm = labls)
TukeyHSD(mod1)
plot(TukeyHSD(mod1))
