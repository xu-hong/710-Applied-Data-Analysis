text(-1.75, 95, paste("Count = ", cnt), cex=0.9)
conf2 <- qt(0.975, df=14)
conf2
qt(0.975,50)
# Problem #4
cm <- dat$ChaveMoist[dat$CensusNo == 2]
cm.n <- length(cm)
cm.mean <- mean(cm)
cm.se <- sd(cm)/sqrt(cm.n)
Z <- qt(0.975, df=cm.n-1)
cm.ci <- c(cm.mean-Z*cm.se, cm.mean+Z*cm.se)
cm.ci
cm
Z <- 1.96
cm.ci <- c(cm.mean-Z*cm.se, cm.mean+Z*cm.se)
cm.ci
cm.n
# Problem #4
cm <- dat$ChaveMoist[dat$CensusNo == 2]
cm.n <- length(cm)
cm.mean <- mean(cm)
cm.se <- sd(cm)/sqrt(cm.n)
Z <- qt(0.975, df=cm.n-1)
cm.ci <- c(cm.mean-Z*cm.se, cm.mean+Z*cm.se)
cm.ci
cm.n
p(0.66, 0, 1)
pnorm(0.66, 0, 1)
qnorm(0.975, 0, 1)
qnorm(0.95, 0, 1)
1/0.4
2.5-1.64
1/0.4
pnorm(-.86, 0, 1)
pnorm(1.645,0,1)
?mean
ï¼Ÿ
?boot
?boot
?qt
qt(0.95, 999)
qt(0.975, 999)
qt(0.975, 49)
qnorm(0.975)
boot()
install.packages("boot")
?boot
??boot
?numeric
?sample
Srand <- rnorm(24, mean=25.46, sd=1.26)
Drand <- rnorm(24, mean=26.27, sd=1.47)
t.test(Srand, Drand)
t.test(Srand, Drand)$p-value
t.test(Srand, Drand)$pvalue
?t.test
t.test(Srand, Drand)$p.value
N <- 1000
alpha <- numeric(N)
for (i in 1:N) {
Srand <- rnorm(24, mean=25.46, sd=1.26)
Drand <- rnorm(24, mean=26.27, sd=1.47)
alpha[i] <- t.test(Srand, Drand)$p.value
)
}
alpha[alpha < 0.05]
alpha < 005
alpha < 0.05
mean(alpha<0.05)
N <- 1000
alpha <- numeric(N)
for (i in 1:N) {
Srand <- rnorm(24, mean=25.46, sd=1.26)
Drand <- rnorm(24, mean=26.27, sd=1.47)
alpha[i] <- t.test(Srand, Drand)$p.value
)
}
mean(alpha<0.025)
N <- 1000
alpha <- numeric(N)
for (i in 1:N) {
Srand <- rnorm(24, mean=25.46, sd=1.26)
Drand <- rnorm(24, mean=26.27, sd=1.47)
alpha[i] <- t.test(Srand, Drand)$p.value
}
mean(alpha<0.025)
alpha[alpha<0.05]
Srand <- rnorm(24, mean=25.46, sd=1.26)
Drand <- rnorm(24, mean=26.27, sd=1.47)
t.test(Srand, Drand)
t.test(Srand, Drand)$statistic
pnorm(-3.488529,0,)
pnorm(-3.488529,0,1)
alpha[1]
alpha[-1]
beta <- c(1,2,3)
beta[1]
beta[-2]
beta[-3]
array(1:50, dim = c(5,10), dimnames = c("a", "b"))
array(1:24, dim = c(3,4,2))
?array
ab <- array(1:50, dim = c(5,10), dimnames = c("a", "b"))
ab
ab["a"]
ab$a
?matrix
array(1:50, dim = c(5,10), dimnames = c("a", "b"), byrow= TRUE)
a <- matrix(8,2,3)
b <- matrix(9,2,3)
a
b
matrix(1:9, 2, 5)
my.array <- array(c(a,b), c(2,3,2))
my.array
d <- matrix(1, 2,4)
d
my.array <- array(c(a,d), c(2,3,2))
my.array
my.array <- array(c(a,d), c(2,3))
my.array
my.array <- array(c(d, a), c(2,3))
my.array
my.array <- array(c(a,b), c(2,3,2))
my.array
dim(my.array)
a[1]
a
a[[1]]
a[1,]
a[,2]
array
ab <- array(1:50, dim = c(5,10), dimnames = c("a", "b"))
ab
dim(ab)
ab[1,]
ab[,1]
ceiling(c(1.2, -0.5))
x <- c(1:20)
a <- 3
b <- 2
plot(x, y=a*x^b, xlab="Counts", ylab="Response", las=1, pch=21, bg="darkblue")
?plot
x <- c(1:20)
a <- 3
b <- 2
plot(x, y=a*x^b, xlab="Counts", ylab="Response", las=2, pch=21, bg="darkblue")
plot(x, y=a*x^b, xlab="Counts", ylab="Response", las=10, pch=21, bg="darkblue")
plot(x, y=a*x^b, xlab="Counts", ylab="Response", las=9, pch=21, bg="darkblue")
plot(x, y=a*x^b, xlab="Counts", ylab="Response", las=5, pch=21, bg="darkblue")
plot(x, y=a*x^b, xlab="Counts", ylab="Response", las=0, pch=21, bg="darkblue")
plot(x, y=a*x^b, xlab="Counts", ylab="Response", las=0, pch=1, bg="darkblue")
plot(x, y=a*x^b, xlab="Counts", ylab="Response", las=0, pch=10, bg="darkblue")
points(10, 300, pch=21, cex=2, col="red", bg="blue")
plot(x, y=a*x^b, xlab="Counts", ylab="Response", las=0, pch=21, bg="darkblue")
points(10, 300, pch=21, cex=2, col="red", bg="blue")
?points
legend(4, 1000, c("target point"), pt.bg="red", pch=21, pt.cex=2)
legend(4, 1000, c("target point"), pt.bg="red", pch=21, pt.cex=5)
legend(4, 1000, c("target point"), pt.bg="red", pch=21, pt.cex=2)
install.packages("pwr")
pwr
pwr.t.test()
pwr.t.test()
install.packages("pwr")
?pwr
??pwr
??pwr.t.test()
pwr.t.test(n=25, d=0.75, sig.level=0.05, alternative="greater")
pwr.t.test(n=25, d=0.75, sig.level=0.05, alternative="greater")
import pwr
include
import
use
library(pwr)
pwr.t.test(n=25, d=0.75, sig.level=0.05, alternative="greater")
?t.test
pwr.t.test(n=25, d=0.75, sig.level=0.05, alternative="two.sided")
?seq
d <- seq(from = 0.1, to = 0.9, by = 0.01)
d
class(d)
samsize <- array(numeric(nd*np), dim=c(nd,np))
d <- seq(from = 0.1, to = 0.9, by = 0.01)
nd <- length(d)
p <- seq(from = 0.4, to = 0.9, by = 0.1)
np <- length(p)
samsize <- array(numeric(nd*np), dim=c(nd,np))
samsize
for (i in 1:np){
for (j in 1:nd){
result <- pwr.t.test(n=NULL, d = d[j], sig.level = 0.05, power = p[i], alternative = "two.sided")
samsize[j,i] <- ceiling(result$n)
}
}
samsize
?rainbow
range(p)
xrange <- range(d)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n", xlab="Effect size (d)", ylab="Sample Size (n)", las = 1)
yrange
?plot
for (i in 1:np) {
lines(d, samsize[,i], type="l", lwd=2, col=colors[i])
}
abline(v=0, h=seq(0, yrange[2], 100), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1], xrange[2], 0.02), lty=2, col="grey89")
title("Sample Size Estimation for T-test\n Sig=0.05 (Twotailed)")
legend("topright", title="Power", as.character(p),
fill=colors)
# Permutation in R
x1 <- c(7, 4, 6, 8, 6, 6, 2, 9)
x2 <- c(5, 5, 3, 4, 4, 7, 2, 2)
xx <- c(x1, x2)
tt <- t.test(x1, x2, alternative ="Greater" ,var.equal =T)
n <- 1000
t <- c()
for (i in 1:n) {
index <- sample(1:length(xx), size = length(x), replace=F)
a <- xx[index]
b <- xx[-index]
t[i] <- mean(a) - mean(b)
}
hist(t, las=1, col="darkblue", xlab="x1 - x2")
x1 <- c(7, 4, 6, 8, 6, 6, 2, 9)
x2 <- c(5, 5, 3, 4, 4, 7, 2, 2)
xx <- c(x1, x2)
tt <- t.test(x1, x2, alternative ="Greater" ,var.equal = T)
n <- 1000
t <- c()
for (i in 1:n) {
index <- sample(1:length(xx), size = length(x1), replace = F)
a <- xx[index]
b <- xx[-index]
t[i] <- mean(a) - mean(b)
}
hist(t, las=1, col="darkblue", xlab="x1 - x2")
tt
x1 <- c(7, 4, 6, 8, 6, 6, 2, 9)
x2 <- c(5, 5, 3, 4, 4, 7, 2, 2)
xx <- c(x1, x2)
tt <- t.test(x1, x2, alternative ="Greater" ,var.equal = T)
x1 <- c(7, 4, 6, 8, 6, 6, 2, 9)
x2 <- c(5, 5, 3, 4, 4, 7, 2, 2)
xx <- c(x1, x2)
tt <- t.test(x1, x2, alternative ="greater" ,var.equal = T)
n <- 1000
t <- c()
tt
tt$estimate[1]
tt$estimate[2]
abline(v=(tt$estimate[1]-tt$estimate[2]), col="red")
mean(t)
t
# Permutation in R
x1 <- c(7, 4, 6, 8, 6, 6, 2, 9)
x2 <- c(5, 5, 3, 4, 4, 7, 2, 2)
xx <- c(x1, x2)
tt <- t.test(x1, x2, alternative ="greater" ,var.equal = T)
n <- 1000
t <- c()
for (i in 1:n) {
index <- sample(1:length(xx), size = length(x1), replace = F)
a <- xx[index]
b <- xx[-index]
t[i] <- mean(a) - mean(b)
}
hist(t, las=1, col="darkblue", xlab="x1 - x2")
abline(v=(tt$estimate[1]-tt$estimate[2]), col="red")
mean(t)
length(t[t>tt$estimate[1]-tt$estimate[2]])/1000
tt
tt$statistic
pt(2.0367, df=14)
pt(2.0367, df=14) - 1
x1
mean(x1>6)
mean(t>tt$estimate[1]-tt$estimate[2])
length(t[t>tt$estimate[1]-tt$estimate[2]])/1000
tt$estimate
dat <- read.csv("AfrPlots.csv", header = T)
attach(dat)
dat1 <- dat[dat$CensusNo==1,]
ct <- cor.test(dat1$ChaveMoist, dat1$BasalArea, method="spearman")
c
ct
?cor.test
?cor
??boot.ci
carrier<-rep(c(0,1), c(100,200))
null.y<-rnorm(300)
alt.y<-rnorm(300, mean=carrier/2)
carrier <- rep(c(0,1), c(100,200))
carrier
carrier/2
?rnomr
?rnorm
null.y<-rnorm(300)
alt.y<-rnorm(300, mean=carrier/2)
null.y <- rnorm(300)
alt.y <- rnorm(300, mean=carrier/2)
null.y <- rnorm(300)
alt.y <- rnorm(300, mean=carrier/2)
?t.test
?rnorm
# Problem #1
young <- c(34, 22, 15, 27, 37, 41, 24, 19, 26, 36)
old <- c(41, 24, 46, 39, 21, 33, 43, 40, 50, 41)
?var.test
var.test(yound, old)
var.test(young, old)
?t.test
t.test(young, old, alternative="two.sided", var.equal=T)
?pt
qt(0.975, df=length(young)-1)
t.test(old, young, alternative="two.sided", var.equal=T)
shapiro.test(young)
shapiro.test(old)
sd(young)
var(young)
sd(young)^2
m1 <- mean(old)
m2 <- mean(young)
var1 <- var(old)
var2 <- var(young)
psd <- sqrt((var1+var2)/2)
es <- abs(m1-m2)/psd
es
m1 - m2
pwr.t.test(n=length(young), d=es, sig.level=0.05, type="two.sample")
library(pwe)
library(pwr)
pwr.t.test(n=length(young), d=es, sig.level=0.05, type="two.sample")
nostimulation <- c(18.4, 16.1, 9.2, 32.2, 13.8, 16.1,27.6, 11.5, 11.5, 18.4, 22.3, 21.1, 16.4, 29.5, 27.9)
stimulation <- c(27.6, 16.1, 6.9, 25.3, 18.4, 11.5, 32.2, 16.1, 20.7, 23.0, 24.7, 18.1, 26.5, 23.4, 8.3)
length(nostimulation)
length(stimulation)
shapiro.test(nostimulation)
shapiro.test(stimulation)
var.test(nostimulation, stimulation)
qt(0.975, df=length(stimulation)-1)
t.test(nostimulation, stimulation, alternative="greater", paired=T)
t.test(nostimulation, stimulation, alternative="greater", paired=T, var.equal=T)
qt(0.95, df=length(stimulation)-1)
t.test(stimulation, nostimulation, alternative="less", paired=T, var.equal=T)
qt(0.2236, 14) - 1
pt(0.2236, 14)
t.test(stimulation, nostimulation, alternative="less", paired=T)
mean(stimulation)
mean(nostimulation)
?pwr.t.test
pwr.t.test(n=NULL, d=0.4, sig.level=0.05, power=0.8, alternative="less")
pwr.t.test(n=NULL, d=0.4, sig.level=0.05, power=0.8, alternative="greater")
pwr.t.test(n=78, d=0.4, sig.level=0.05, alternative="greater")
pwr.t.test(n=78, d=0.4, sig.level=0.05, power=0.8, alternative="greater")
d <- seq(from = 0.3, to = 0.5, by = 0.01)
nd <- length(d)
p <- seq(from = 0.6, to = 0.8, by = 0.1)
np <- length(p)
samsize <- array(numeric(nd*np), dim=c(nd,np))
for (i in 1:np){
for (j in 1:nd){
result <- pwr.t.test(n=NULL, d = d[j], sig.level = 0.05, power = p[i], alternative = "greater")
samsize[j,i] <- ceiling(result$n)
}
}
xrange <- range(d)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n", xlab="Effect size (d)", ylab="Sample Size (n)", las = 1)
for (i in 1:np) {
lines(d, samsize[,i], type="l", lwd=2, col=colors[i])
}
abline(v=0, h=seq(0, yrange[2], 100), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1], xrange[2], 0.02), lty=2, col="grey89")
title("Sample Size Estimation for T-test\n Sig=0.05 (Onetailed)")
legend("topright", title="Power", as.character(p),
fill=colors)
abline(v=0, h=seq(0, yrange[2], 10), lty=2, col="grey89")
abline(v=0, h=pwr.result$n, col="black")
pwr.result <- pwr.t.test(n=NULL, d=0.4, sig.level=0.05, power=0.8, alternative="greater")
abline(v=0, h=pwr.result$n, col="black")
points(0.4, pwr.result$n, pch=21, cex=2, col=colors[3], bg=colors[3])
#Problem #5
#Draw the graph
n <- seq(from = 10, to = 100, by = 5)
nn <- length(n)
p <- seq(from = 0.6, to = 0.8, by = 0.1)
np <- length(p)
samsize <- array(numeric(nn*np), dim=c(nn,np))
for (i in 1:np){
for (j in 1:nn){
result <- pwr.t.test(n=n[j], d = NULL, sig.level = 0.05, power = p[i], alternative = "greater")
samsize[j,i] <- ceiling(result$d)
}
}
xrange <- range(n)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n", xlab="Sample size (n)", ylab="Effect Size (d)", las = 1)
for (i in 1:np) {
lines(n, samsize[,i], type="l", lwd=2, col=colors[i])
}
n <- seq(from = 10, to = 100, by = 5)
nn <- length(n)
p <- seq(from = 0.6, to = 0.8, by = 0.1)
np <- length(p)
samsize <- array(numeric(nn*np), dim=c(nn,np))
for (i in 1:np){
for (j in 1:nn){
result <- pwr.t.test(n=n[j], d = NULL, sig.level = 0.05, power = p[i], alternative = "greater")
samsize[j,i] <- result$d
}
}
xrange <- range(n)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n", xlab="Sample size (n)", ylab="Effect Size (d)", las = 1)
for (i in 1:np) {
l
;
}
#Draw the graph
n <- seq(from = 10, to = 100, by = 5)
nn <- length(n)
p <- seq(from = 0.6, to = 0.8, by = 0.1)
np <- length(p)
samsize <- array(numeric(nn*np), dim=c(nn,np))
for (i in 1:np){
for (j in 1:nn){
result <- pwr.t.test(n=n[j], d = NULL, sig.level = 0.05, power = p[i], alternative = "greater")
samsize[j,i] <- result$d
}
}
xrange <- range(n)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n", xlab="Sample size (n)", ylab="Effect Size (d)", las = 1)
for (i in 1:np) {
lines(n, samsize[,i], type="l", lwd=2, col=colors[i])
}
abline(v=0, h=seq(0, yrange[2], 0.2), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1], xrange[2], 10), lty=2, col="grey89")
title("Effect Size Estimation for T-test\n Sig=0.05 (Onetailed)")
legend("topright", title="Power", as.character(p),
fill=colors)
?pairwise.t.test
# normal assumption?
boxplot(log(ChaveMoist) ~ Site, las=1,
ylab = "log(Biomass)", xlab = "Sites")
points(jitter(rep(1, length(Site[Site==1])), f=4),
log(ChaveMoist[Site==1]), col = "darkgreen")
points(jitter(rep(2, length(Site[Site==2])), f=4),
log(ChaveMoist[Site==2]), col = "darkred")
points(jitter(rep(3, length(Site[Site==3])), f=4),
log(ChaveMoist[Site==3]), col = "darkblue")
qqnorm(ChaveMoist[Site==1])
qqline(ChaveMoist[Site==1])
# log does not seem to make much difference
qqnorm(log(ChaveMoist[Site==1]))
qqline(log(ChaveMoist[Site==1]))
# do not reject the null hypothesis!
shapiro.test(ChaveMoist[Site==1])
sd(ChaveMoist[Site==1])/sd(ChaveMoist[Site==2])
sd(ChaveMoist[Site==2])/sd(ChaveMoist[Site==3])
sd(ChaveMoist[Site==1])/sd(ChaveMoist[Site==3])
# one way ANOVA
mod1 <- aov(ChaveMoist ~ factor(Site))
summary(mod1)
#To determine which of the means are significantly different from one another
#we conduct a post-hoc test.
TukeyHSD(mod1)
plot(TukeyHSD(mod1))
setwd("/Users/xuhong/Documents/Duke/Term 1 Courses/ENVIRON 710 Applied data analysis/Lab/Lab 7")
adat <- read.csv("Afrplots.csv", header=T)
adat$Site <- as.factor(rep(c(rep(1,10), rep(2,10), rep(3,10)), 2))
bdat <- adat[adat$CensusNo == 1, ]
attach(bdat)
par(mfrow=c(2,2))
boxplot(ChaveMoist ~ Site, las=1, ylab="Biomass", xlab="Sites")
points(jitter(rep(1, length(Site[Site==1])), f=4), ChaveMoist[Site==1], col = "darkgreen")
points(jitter(rep(2, length(Site[Site==2])), f=4), ChaveMoist[Site==2], col = "darkblue")
points(jitter(rep(3, length(Site[Site==3])), f=4), ChaveMoist[Site==3], col = "darkred")
# normal assumption?
boxplot(log(ChaveMoist) ~ Site, las=1,
ylab = "log(Biomass)", xlab = "Sites")
points(jitter(rep(1, length(Site[Site==1])), f=4),
log(ChaveMoist[Site==1]), col = "darkgreen")
points(jitter(rep(2, length(Site[Site==2])), f=4),
log(ChaveMoist[Site==2]), col = "darkred")
points(jitter(rep(3, length(Site[Site==3])), f=4),
log(ChaveMoist[Site==3]), col = "darkblue")
qqnorm(ChaveMoist[Site==1])
qqline(ChaveMoist[Site==1])
# log does not seem to make much difference
qqnorm(log(ChaveMoist[Site==1]))
qqline(log(ChaveMoist[Site==1]))
# do not reject the null hypothesis!
shapiro.test(ChaveMoist[Site==1])
sd(ChaveMoist[Site==1])/sd(ChaveMoist[Site==2])
sd(ChaveMoist[Site==2])/sd(ChaveMoist[Site==3])
sd(ChaveMoist[Site==1])/sd(ChaveMoist[Site==3])
# one way ANOVA
mod1 <- aov(ChaveMoist ~ factor(Site))
summary(mod1)
#To determine which of the means are significantly different from one another
#we conduct a post-hoc test.
TukeyHSD(mod1)
plot(TukeyHSD(mod1))
pairwise.t.test(ChaveMoist, Site)
